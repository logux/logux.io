name: Deploy

on:
  push:
    branches:
      - master
      - django # TODO: remove
  repository_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      FORCE_COLOR: 2
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Install Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14'
      - name: Get Yarn cache path
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache Yarn
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: yarn-production-${{ hashFiles('**/yarn.lock') }}
          restore-keys: yarn-production-
      - name: Install Node.js dependencies
        run: yarn install --production
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: Build static files
        run: yarn build
        env:
          GITTER_TOKEN: ${{ secrets.GITTER_TOKEN }}
          GITTER_ROOM_ID: ${{ secrets.GITTER_ROOM_ID }}
      - name: Check files changes
        id: hash
        run: npx ssdeploy changed
        env:
          WEBSITE_URL: ${{ secrets.WEBSITE_URL }}
      - name: Install Google Cloud
        if: "!steps.hash.outputs.noChanges"
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '274.0.1'
          service_account_key: ${{ secrets.GCLOUD_AUTH }}
      - name: Deploy files
        if: "!steps.hash.outputs.noChanges"
        run: npx ssdeploy deploy --verbose
        env:
          GCLOUD_APP: ${{ secrets.GCLOUD_APP }}
          GCLOUD_PROJECT: ${{ secrets.GCLOUD_PROJECT }}
          CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE }}
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
      - name: Warm CDN
        if: "!steps.hash.outputs.noChanges"
        run: wget --page-requisites https://logux.io
      - name: Audit website
        if: "!steps.hash.outputs.noChanges"
        uses: treosh/lighthouse-ci-action@v2
        with:
          runs: 3
          temporaryPublicStorage: true
          configPath: ./lighthouserc.json
      - name: Save audit results
        if: "!steps.hash.outputs.noChanges"
        uses: actions/upload-artifact@v1
        with:
          name: lighthouse-results
          path: '.lighthouseci'
